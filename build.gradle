buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			// Needed for FG
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			// Needed for gradle API
			name = "gradle"
			url = "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		// ForgeGradle itself
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

// Compiling
apply plugin: 'java'
// idea IDE
apply plugin: 'idea'
// eclipse IDE
apply plugin: 'eclipse'
// Needed to use content from maven repos
apply plugin: 'maven'

group = 'pokechu22.test.begradle'
version = '0.1.4-SNAPSHOT'
archivesBaseName = 'begradle'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
	// Main maven repos
	jcenter()
	mavenCentral()
	// Local repository (eg, own build of ForgeGradle)
	// Below those repos so that source jars work (but above FG)
	mavenLocal()
	// Needed for ForgeGradle (among other things) 
	maven {
		name = "forge"
		url = "http://files.minecraftforge.net/maven"
	}
}

configurations {
	shade
	compileOnly.extendsFrom shade
}

dependencies {
	compile gradleApi()

	// Apache commons-io
	compile 'commons-io:commons-io:2.5'
	// java-diff-utils: https://github.com/dnaumenko/java-diff-utils
	compile 'com.googlecode.java-diff-utils:diffutils:1.3.0'
	// We need *this* version for FG
	compile 'com.google.guava:guava:18.0'

	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-library:1.3'

	compile 'net.minecraftforge.srg2source:Srg2Source:4.0-SNAPSHOT'

	// Put FG below so that dependencies are prioritized (source attachment)
	compile 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.14'
}

sourceSets {
	main.compileClasspath += configurations.shade;
	main.runtimeClasspath += configurations.shade;
	test.compileClasspath += configurations.shade;
	test.runtimeClasspath += configurations.shade;
}

compileJava {
	options.deprecation = true
}

jar {

	configurations.shade.each { dep ->
		from(project.zipTree(dep)){
			exclude 'META-INF', 'META-INF/**'
		}
	}

	manifest {
		attributes 'version': project.version
		attributes 'javaCompliance': project.targetCompatibility
		attributes 'group': project.group
		attributes 'Implementation-Version': project.version + getGitHash()
	}
}

javadoc {
	classpath += configurations.compileOnly

	// Linked javadoc urls
	options.addStringOption 'link', 'https://gradle.org/docs/current/javadoc/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc
	classifier = "javadoc"
}

artifacts {
	archives jar
	archives javadocJar
}

def getGitHash() {
	def process = 'git rev-parse --short HEAD'.execute()
	process.waitFor()
	return '-' + (process.exitValue() > 0 ? 'unknown' : process.text.trim())
}
